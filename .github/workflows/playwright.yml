name: VRT Tests
on:
  pull_request:
    types: [labeled]

jobs:
  # job id
  vrt-docker:
    if: contains(github.event.pull_request.labels.*.name, 'vrt')
    timeout-minutes: 60
    runs-on: ubuntu-20.04
    steps:
      - run: echo "Running Playwright tests"

      - name: checkout current branch
        uses: actions/checkout@v4 # リポジトリをチェックアウト
        with:
          ref: ${{ github.ref }} # 現在のブランチを指定
          fetch-depth: 0 # フェッチするコミットの深さを指定

      - name: download expected images
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          # 親ブランチのgitshaでスクリーンショットを取得
          name: screenshot ${{ github.event.pull_request.base.sha }}

      - uses: docker/setup-buildx-action@v2

        # ポイント 2 キャッシュを利用する
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ github.ref }}
            refs/head/main

      - name: Cache next Docker layers local
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./infra/next/Dockerfile
          tags: my-app-react-reg-suit-next
          cache-from: type=local,src=/tmp/.buildx-cache-next
          cache-to: type=local,dest=/tmp/.buildx-cache-new-next,mode=max

      - name: Cache playwright Docker layers local
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./infra/playwright/Dockerfile
          tags: my-app-react-reg-suit-playwright
          cache-from: type=local,src=/tmp/.buildx-cache-playwright
          cache-to: type=local,dest=/tmp/.buildx-cache-new-playwright,mode=max

      # - name: Cache front Docker layers
      #   uses: docker/build-push-action@v4
      #   with:
      #     load: true
      #     push: false
      #     context: .
      #     file: ./infra/next/Dockerfile
      #     tags: my-app-react-reg-suit-next
      #     cache-from: type=gha,scope=front
      #     cache-to: type=gha,mode=min,scope=front

      # - name: Cache playwright Docker layers
      #   uses: docker/build-push-action@v4
      #   with:
      #     load: true
      #     push: false
      #     context: .
      #     file: ./infra/playwright/Dockerfile
      #     tags: my-app-react-reg-suit-playwright
      #     cache-from: type=gha,scope=playwright
      #     cache-to: type=gha,mode=min,scope=playwright

      - name: Start next containers
        run: docker compose up next -d

      - name: Check if frontend container is running
        run: docker compose ps next

      - name: after ss
        run: docker compose run playwright bash -c "chmod +x ./wait.sh && ./wait.sh next:3000 && npm run ss-after"

      - name: echo base ref
        run: echo ${{github.base_ref}}

        # baseブランチのfrontコードを取得
      - name: checkout base branch
        uses: actions/checkout@v4 # リポジトリをチェックアウト
        with:
          ref: ${{github.base_ref}} # ベースブランチを指定
          # frontディレクトリだけをチェックアウト
          sparse-checkout: |
            front
          sparse-checkout-cone-mode: false
          path: base-front

      - name: list front files
        run: ls -la front

        # base-frontディレクトリのfrontディレクトリを表示
      - name: list base-front files
        run: ls -la base-front/front

      # baseブランチのfrontディレクトリをfrontディレクトリにコピーして、元のbase-frontディレクトリを削除
      - name: copy base-front to front
        run: sudo rm -rf front/app && sudo cp -rf base-front/front/app front/app && sudo rm -rf base-front

      - name: list front files after copy
        run: ls -la front

        # frontコンテナの再起動
      - name: frontコンテナの再起動
        run: docker compose restart next

      # beforeのスクリーンショットを取得＋reg-cliによる比較
      - name: before ss
        run: docker compose run playwright bash -c "chmod +x ./wait.sh && ./wait.sh next:3000 && npm i && npm run ss-before && npm run reg"
        continue-on-error: true

      # 存在チェック ss-before
      - name: list playwright files
        run: ls -la playwright/vrt/after

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screen-shot ${{ github.sha }} # gitshaでスクリーンショットを保存
          path: |
            playwright/vrt
          retention-days: 30

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache-next
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache-playwright

      # 前のジョブの成功失敗に関係なく実行
      - name: Cleanup Docker environment
        if: always()
        run: docker compose down --rmi all --volumes --remove-orphans
