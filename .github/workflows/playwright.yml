name: VRT Tests
on:
  pull_request:
    types: [labeled]

jobs:
  # job id
  vrt-docker:
    if: contains(github.event.pull_request.labels.*.name, 'vrt')
    timeout-minutes: 60
    runs-on: ubuntu-20.04
    steps:
      - run: echo "Running Playwright tests"

      - name: checkout current branch
        uses: actions/checkout@v4 # リポジトリをチェックアウト
        with:
          ref: ${{ github.ref }} # 現在のブランチを指定
          fetch-depth: 0 # フェッチするコミットの深さを指定

      - name: download expected images
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          # 親ブランチのgitshaでスクリーンショットを取得
          name: screenshot ${{ github.event.pull_request.base.sha }}

      # node_modulesをキャッシュ
      - name: cache node_modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: "**/node_modules"
          # hashFilesでpackage-lock.jsonの変更を検知
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: docker/setup-buildx-action@v2

      - name: Cache front Docker layers
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./infra/next/Dockerfile
          tags: my-app-react-reg-suit-next
          cache-from: type=gha,scope=front
          cache-to: type=gha,mode=max,scope=front

      - name: Cache playwright Docker layers
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./infra/playwright/Dockerfile
          tags: my-app-react-reg-suit-playwright
          cache-from: type=gha,scope=playwright
          cache-to: type=gha,mode=max,scope=playwright

      - name: Build Docker containers
        run: docker compose build --progress=plain --build-arg BUILDKIT_INLINE_CACHE=1

      - name: Start Docker containers
        run: docker compose up -d

      - name: Check if frontend container is running
        run: docker compose ps next

      # 存在チェック
      - name: list playwsright files
        run: ls -la playwright/

      - name: after ss
        run: docker compose run playwright bash -c "chmod +x /wait.sh && /wait.sh next:3000 && npm i && npm run ss-after"

      # 存在チェック ss-after
      - name: list playwright files
        run: ls -la playwright/vrt/after

        # baseブランチのfrontコードを取得
      - name: checkout master branch
        uses: actions/checkout@v4 # リポジトリをチェックアウト
        with:
          ref: master # masterブランチを指定
          # frontディレクトリだけをチェックアウト
          sparse-checkout: |
            front
          sparse-checkout-cone-mode: false
          path: master-front

      - name: list front files
        run: ls -la front

        # master-frontディレクトリのfrontディレクトリを表示
      - name: list master-front files
        run: ls -la master-front/front

      # masterブランチのfrontディレクトリをfrontディレクトリにコピーして、元のmaster-frontディレクトリを削除
      - name: copy master-front to front
        run: chmod -R 777 front/app && chmod -R 777 master-front/front/app && rm -rf front/app && cp -rf master-front/front/app front/app && rm -rf master-front

      - name: list front files after copy
        run: ls -la front

        # frontコンテナの再起動
      - name: frontコンテナの再起動
        run: docker compose restart next

      # beforeのスクリーンショットを取得＋reg-cliによる比較
      - name: before ss
        run: docker compose run playwright bash -c "chmod +x /wait.sh && /wait.sh next:3000 && npm i && npm run ss-before && npm run reg"

      # 存在チェック ss-before
      - name: list playwright files
        run: ls -la playwright/vrt/after

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screen-shot ${{ github.sha }} # gitshaでスクリーンショットを保存
          path: |
            playwright/vrt
          retention-days: 30

      # 前のジョブの成功失敗に関係なく実行
      - name: Cleanup Docker environment
        if: always()
        run: docker compose down --rmi all --volumes --remove-orphans
