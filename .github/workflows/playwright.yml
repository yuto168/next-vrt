name: VRT Tests
on:
  workflow_dispatch:

jobs:
  # job id
  vrt-docker:
    timeout-minutes: 60
    runs-on: ubuntu-20.04
    steps:
      - run: echo "Running Playwright tests"

      - name: checkout current branch
        uses: actions/checkout@v4 # リポジトリをチェックアウト
        with:
          ref: ${{ github.ref }} # 現在のブランチを指定

      - name: Get current branch name
        run: echo "CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

      - name: Get default branch name
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "DEFAULT_BRANCH=${DEFAULT_BRANCH}" >> $GITHUB_ENV

      - name: Get base commit SHA
        run: |
          BASE_BRANCH="${{ env.DEFAULT_BRANCH }}"
          if [ "${{ env.CURRENT_BRANCH }}" = "$BASE_BRANCH" ]; then
            # 現在のブランチがデフォルトブランチの場合、1つ前のコミットを使用
            BASE_SHA=$(git rev-parse HEAD~1)
          else
            # それ以外の場合、merge-baseを使用
            BASE_SHA=$(git merge-base ${{ env.CURRENT_BRANCH }} $BASE_BRANCH)
          fi
          echo "Base commit SHA: $BASE_SHA"
          echo "BASE_SHA=$BASE_SHA" >> $GITHUB_ENV

      - name: Display results
        run: |
          echo "Current branch: ${{ env.CURRENT_BRANCH }}"
          echo "Default branch: ${{ env.DEFAULT_BRANCH }}"
          echo "Base commit SHA: ${{ env.BASE_SHA }}"

      # - name: echo github
      #   run: git merge-base feature-parent-branch-test master

      - name: Get common ancestor commit
        run: |
          ancestor_commit=$(git merge-base feature-parent-branch-test master)
          echo "Common ancestor commit: $ancestor_commit"

      # - name: download expected images
      #   uses: actions/download-artifact@v2
      #   with:
      #     # 親ブランチのgitshaでスクリーンショットを取得
      #     name: screenshot ${{ github.event.before }}

      # - name: checkout master branch
      #   uses: actions/checkout@v4 # リポジトリをチェックアウト
      #   with:
      #     ref: master # masterブランチを指定
      #     # frontディレクトリだけをチェックアウト
      #     sparse-checkout: |
      #       front
      #     sparse-checkout-cone-mode: false
      #     path: master-front

      # - name: list front files
      #   run: ls -la front

      #   # master-frontディレクトリのfrontディレクトリを表示
      # - name: list master-front files
      #   run: ls -la master-front/front

      # # masterブランチのfrontディレクトリをfrontディレクトリにコピーして、元のmaster-frontディレクトリを削除
      # - name: copy master-front to front
      #   run: rm -rf front && cp -r master-front/front front

      # - name: list front files after copy
      #   run: ls -la front

      # - name: Create env file(.envファイルを作成)
      #   run: |
      #     touch ./playwright/.env
      #     echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ./playwright/.env
      #     echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ./playwright/.env
      #     echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> ./playwright/.env
      #     echo "s3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> ./playwright/.env

      # - name: call docker run workflow
      #   uses: ./.github/actions/docker-run

      - uses: docker/setup-buildx-action@v2

      - name: Cache front Docker layers
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./infra/next/Dockerfile
          tags: my-app-react-reg-suit-next
          cache-from: type=gha,scope=front
          cache-to: type=gha,mode=max,scope=front

      - name: Cache playwright Docker layers
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./infra/playwright/Dockerfile
          tags: my-app-react-reg-suit-playwright
          cache-from: type=gha,scope=playwright
          cache-to: type=gha,mode=max,scope=playwright

      - name: Build Docker containers
        run: docker compose build --progress=plain --build-arg BUILDKIT_INLINE_CACHE=1

      - name: Start Docker containers
        run: docker compose up --abort-on-container-exit

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screen-shot ${{ github.sha }} # gitshaでスクリーンショットを保存
          path: |
            playwright/directory_contains_actual_images/
          retention-days: 30

      # 前のジョブの成功失敗に関係なく実行
      - name: Cleanup Docker environment
        if: always()
        run: docker compose down --rmi all --volumes --remove-orphans
