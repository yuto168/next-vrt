name: VRT Tests
on:
  pull_request:
    types: [labeled, synchronize]

# 連続push対策
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  vrt-docker:
    if: contains(github.event.pull_request.labels.*.name, 'vrt')
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    timeout-minutes: 60

    env:
      PORT: 3000
      FRONT_CONTAINER: next
      PLAYWRIGHT_CONTAINER_NAME: playwright

    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Current Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 1 # 最新のコミットだけでよいので

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # 暫定でビルドキャッシュのみ利用
      - name: Cache Front Docker Layers
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./infra/next/Dockerfile
          cache-from: type=gha,scope=next
          cache-to: type=gha,mode=max,scope=next

      # 暫定でビルドキャッシュのみ利用
      - name: Cache Playwright Docker Layers
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./infra/playwright/Dockerfile
          cache-from: type=gha,scope=playwright
          cache-to: type=gha,mode=max,scope=playwright

        # コンテナ起動+テスト実行
      - name: Start Next Containers and Take Screenshot
        run: |
          docker compose up next -d
          docker compose run playwright bash -c "chmod +x ./wait.sh && ./wait.sh next:3000 && npm run ss-after"

      - name: Chmod Playwright Directory
        run: sudo chmod -R 777 playwright

      - name: Restore Base Screenshots Cache
        uses: actions/cache@v3
        id: base-ss-cache
        with:
          path: playwright/vrt/before
          key: screenshot-base-${{ github.event.pull_request.base.sha }}

      # baseブランチのfrontコードを取得
      - name: Checkout Base Branch
        if: steps.base-ss-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{github.base_ref}}
          sparse-checkout: |
            front
          sparse-checkout-cone-mode: false
          path: base-front

      - name: npm list front
        run: |
          docker compose exec -T next npm list

      # baseブランチのfrontディレクトリをfrontディレクトリにコピーして、元のbase-frontディレクトリを削除
      - name: Copy Base-Front To Front
        if: steps.base-ss-cache.outputs.cache-hit != 'true'
        run: |
          id
          ls -la front
          sudo rm -rf front
          sudo mv base-front/front front
          sudo rm -rf base-front
          ls -la front

        # frontコンテナの再起動
      - name: Restart Front Container
        if: steps.base-ss-cache.outputs.cache-hit != 'true'
        run: |
          docker compose up next -d --force-recreate

      - name: npm list front
        run: |
          ls -la front
          docker compose exec -T next npm list

      # beforeのスクリーンショットを取得
      - name: Take Before Screenshots
        if: steps.base-ss-cache.outputs.cache-hit != 'true'
        run: docker compose run playwright bash -c "./wait.sh next:3000 && npm run ss-before"

      # reg-cliによる比較
      - name: Compare Screenshots
        run: docker compose run playwright bash -c "npm run reg"
        continue-on-error: true

      - name: Upload VRT Reports
        uses: actions/upload-artifact@v4
        id: upload-vrt-reports
        with:
          name: screen-shot ${{ github.sha }} # gitshaでスクリーンショットを保存
          path: |
            playwright/vrt
          retention-days: 30 # とりあえず１カ月保存

      # AWSへの認証
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: "ap-southeast-2" # リージョンを指定
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/oidc-example-gha" # 作成した IAM ロールの ARN "#self hosted runnnerの場合は不要"

      # s3へのアップロード
      - name: Deploy VRT Reports to S3
        working-directory: ./playwright/vrt
        run: aws s3 cp . s3://ci-cd-demo-reg-suit-vrt-screenshots/vrt-cicd-demo/${{github.sha}} --recursive

      - name: Comment Results on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // レポートファイルの読み込み
            const reportPath = 'playwright/vrt/reports/report.json';
            const json = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

            // VRT結果抽出
            const result = {
              changed: json.failedItems.length.toString(),
              newItems: json.newItems.length.toString(),
              deleted: json.deletedItems.length.toString(),
              passed: json.passedItems.length.toString(),
            };


            // Markdown形式のレポート作成
            const markdown = await core.summary
              .addHeading(`📸 Visual Regression Test Results`, 3)
              .addTable([
                ["🔴 Changed Items",  "🟡 New Items",        "🟤 Deleted Items",  "🔵 Passed Items"],
                [result.changed, result.newItems, result.deleted, result.passed]
              ])
              .addLink('You can download report from here', 
               `${{steps.upload-vrt-reports.outputs.artifact-url}}`)
              .stringify();

            // コメントのパラメータ作成
            const params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: markdown,
            };

            // コメントの投稿
            await github.rest.issues.createComment(params);

      # コンテナ停止
      - name: Cleanup Docker Environment
        if: always()
        run: docker compose down --rmi all --volumes --remove-orphans
