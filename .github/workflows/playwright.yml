name: VRT Tests
on:
  pull_request:
    types: [labeled, synchronize]

jobs:
  # job id
  vrt-docker:
    if: contains(github.event.pull_request.labels.*.name, 'vrt')
    timeout-minutes: 60
    runs-on: ubuntu-20.04
    steps:
      - run: echo "Running Playwright Tests"

      - name: Checkout Current Branch
        uses: actions/checkout@v4 # リポジトリをチェックアウト
        with:
          ref: ${{ github.ref }} # 現在のブランチを指定
          fetch-depth: 0 # フェッチするコミットの深さを指定

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      #   # ポイント 2 キャッシュを利用する
      # - name: Cache Next Docker Layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache-next
      #     # キャッシュキー
      #     key: ${{ github.ref }}-${{ github.sha }}-next
      #     # keyがヒットしなかった場合に利用するキャッシュキー
      #     restore-keys: |
      #       ${{ github.ref }}
      #       refs/head/master

      #   # ポイント 2 キャッシュを利用する
      # - name: Cache Playwright Docker Layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache-playwright
      #     key: ${{ github.ref }}-${{ github.sha }}-playwright
      #     restore-keys: |
      #       ${{ github.ref }}
      #       refs/head/master

      # - name: Cache Next Docker Layers Local
      #   uses: docker/build-push-action@v4
      #   with:
      #     load: true
      #     push: false
      #     context: .
      #     builder: ${{ steps.buildx.outputs.name }}
      #     file: ./infra/next/Dockerfile
      #     tags: my-app-react-reg-suit-next
      #     cache-from: type=local,src=/tmp/.buildx-cache-next
      #     cache-to: type=local,dest=/tmp/.buildx-cache-new-next,mode=max

      # - name: Cache Playwright Docker Layers Local
      #   uses: docker/build-push-action@v4
      #   with:
      #     load: true
      #     push: false
      #     context: .
      #     builder: ${{ steps.buildx.outputs.name }}
      #     file: ./infra/playwright/Dockerfile
      #     tags: my-app-react-reg-suit-playwright
      #     cache-from: type=local,src=/tmp/.buildx-cache-playwright
      #     cache-to: type=local,dest=/tmp/.buildx-cache-new-playwright,mode=max

      # イメージのキャッシュは必要に応じて利用する。暫定でビルドキャッシュのみ利用
      - name: Cache Front Docker Layers
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./infra/next/Dockerfile
          # tags: my-app-react-reg-suit-next
          cache-from: type=gha,scope=next
          cache-to: type=gha,mode=max,scope=next

      # イメージのキャッシュは必要に応じて利用する。暫定でビルドキャッシュのみ利用
      - name: Cache Playwright Docker Layers
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./infra/playwright/Dockerfile
          # tags: my-app-react-reg-suit-playwright
          cache-from: type=gha,scope=playwright
          cache-to: type=gha,mode=max,scope=playwright

      - name: Start Next Containers
        run: docker compose up next -d

      - name: who am i
        run: whoami

      - name: Take Screenshot Of The Current State
        run: docker compose run playwright bash -c "chmod +x ./wait.sh && ./wait.sh next:3000 && npm run ss-after"

      - name: Chmod Playwright Directory
        run: sudo chmod -R 777 playwright

      - name: Restore Base Screenshots Cache
        uses: actions/cache@v3
        id: base-ss-cache
        with:
          path: playwright/vrt/before
          key: screenshot-base-${{ github.event.pull_request.base.sha }}

      # baseブランチのfrontコードを取得
      - name: Checkout Base Branch
        if: steps.base-ss-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4 # リポジトリをチェックアウト
        with:
          ref: ${{github.base_ref}} # ベースブランチを指定
          # frontディレクトリだけをチェックアウト
          sparse-checkout: |
            front
          sparse-checkout-cone-mode: false
          path: base-front

      # baseブランチのfrontディレクトリをfrontディレクトリにコピーして、元のbase-frontディレクトリを削除
      - name: Copy Base-Front To Front
        if: steps.base-ss-cache.outputs.cache-hit != 'true'
        run: |
          sudo rm -rf front
          sudo mv base-front/front front
          sudo rm -rf base-front

        # frontコンテナの再起動
      - name: Restart Front Container
        if: steps.base-ss-cache.outputs.cache-hit != 'true'
        run: docker compose restart next

      # beforeのスクリーンショットを取得
      - name: Take Before Screenshots
        if: steps.base-ss-cache.outputs.cache-hit != 'true'
        run: docker compose run playwright bash -c "chmod +x ./wait.sh && ./wait.sh next:3000 && npm run ss-before"
        continue-on-error: true

      # reg-cliによる比較
      - name: Compare Screenshots
        run: docker compose run playwright bash -c "npm run reg"
        continue-on-error: true

      - name: Upload VRT Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screen-shot ${{ github.sha }} # gitshaでスクリーンショットを保存
          path: |
            playwright/vrt
          retention-days: 30

      # - name: Fix Permissions Of VRT Reports
      #   run: |
      #     sudo chmod -c -R +rX "playwright/vrt" | while read line; do
      #       echo "::warning title=Invalid file permissions automatically fixed::$line"
      #     done

      # - name: Upload VRT Reports To Page Artifact
      #   uses: actions/upload-pages-artifact@v3.0.1
      #   if: always()
      #   with:
      #     name: screen-shot ${{ github.sha }} # gitshaでスクリーンショットを保存
      #     retention-days: 30
      #     path: playwright/vrt

      #   # Temp fix
      #   # https://github.com/docker/build-push-action/issues/252
      #   # https://github.com/moby/buildkit/issues/1896
      # - name: Move Cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache-next
      #     rm -rf /tmp/.buildx-cache-playwright
      #     mv /tmp/.buildx-cache-new-next /tmp/.buildx-cache-next
      #     mv /tmp/.buildx-cache-new-playwright /tmp/.buildx-cache-playwright

      - name: Commnet Results on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '## Visual Regression Test Results\n\n'
            }

      # 前のジョブの成功失敗に関係なく実行
      - name: Cleanup Docker Environment
        if: always()
        run: docker compose down --rmi all --volumes --remove-orphans

  # deploy-to-github-pages:
  #   runs-on: ubuntu-latest
  #   needs: vrt-docker
  #   # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
  #   permissions:
  #     pages: write # to deploy to Pages
  #     id-token: write # to verify the deployment originates from an appropriate source

  #   # Deploy to the github-pages environment
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}

  #   steps:
  #     - name: Deploy To GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4 # or specific "vX.X.X" version tag for this action
  #       with:
  #         artifact_name: screen-shot ${{ github.sha }}
