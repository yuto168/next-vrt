name: VRT Tests
# Manually trigger the workflow
on:
  workflow_dispatch:
jobs:
  # job id
  vrt-docker:
    timeout-minutes: 60
    runs-on: ubuntu-20.04
    steps:
      - run: echo "Running Playwright tests"

      - name: checkout
        uses: actions/checkout@v4 # リポジトリをチェックアウト

      - name: Create env file(.envファイルを作成)
        run: |
          touch ./playwright/.env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ./playwright/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ./playwright/.env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> ./playwright/.env
          echo "s3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> ./playwright/.env

      - name: Start Docker containers
        run: docker compose up -d

      - name: Check container status
        run: docker ps

      - name: npm install
        run: docker compose exec playwright bash -c "npm i && npm run vrt"

      # - name: Run Playwright tests in Docker container
      #   run: npm run vrt

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   # キャッシュの保存先と復元先を指定
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ github.ref }}-${{ github.sha }} # github.ref はブランチ名、github.sha はコミットハッシュ
      #     restore-keys: |
      #       ${{ github.ref }}-${{ github.sha }}
      #       ${{ github.ref }}
      #       refs/head/main

      # - name: create tag
      #   run: |
      #     SHA=${{ github.sha }}
      #     TAG=${IMAGE}:$(TZ=UTC-9 date '+%Y%m')-${SHA:0:7}
      #     if [ "${{ github.ref }}" == "refs/heads/main" ]; then
      #       LATEST=${IMAGE}:latest
      #       echo "TAGS=$TAG,$LATEST" >> $GITHUB_ENV
      #     else
      #       echo "TAGS=$TAG" >> $GITHUB_ENV
      #     fi
      #     echo TAG $

      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: false
      #     tags: ${{ env.TAGS }}
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache]

      # 前のジョブの成功失敗に関係なく実行
      - name: Cleanup Docker environment
        if: always()
        run: docker compose down --rmi all --volumes --remove-orphans
